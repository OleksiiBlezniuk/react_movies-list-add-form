{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovieControl/NewMovieControl.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovieControl","value","name","handleChange","inputValidation","validationKey","isValid","classNames","type","onChange","event","onBlur","NewMovie","state","isTitleValid","isImgUrlValid","isImdbUrlValid","isImdbIdValid","preventDefault","target","setState","handleSubmit","newMovie","props","addMovie","length","test","this","id","onSubmit","form","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.554f56e5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport './NewMovieControl.scss';\n\nexport function NewMovieControl({\n  value,\n  name,\n  title,\n  handleChange,\n  inputValidation,\n  validationKey,\n  isValid,\n}) {\n  return (\n    <label className=\"form-label\">\n      {`${title}: `}\n      <input\n        className={classNames('form-control', {\n          'form-control--invalid': !isValid,\n        })}\n        type=\"text\"\n        name={name}\n        value={value}\n        onChange={event => handleChange(event, validationKey)}\n        onBlur={() => inputValidation(name, validationKey)}\n      />\n      <span\n        className={classNames('error-message', {\n          'error-message--visible': !isValid,\n        })}\n      >\n        {`${title} is invalid!`}\n      </span>\n    </label>\n  );\n}\n\nNewMovieControl.propTypes = {\n  value: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  inputValidation: PropTypes.func.isRequired,\n  validationKey: PropTypes.string.isRequired,\n  isValid: PropTypes.bool,\n};\n\nNewMovieControl.defaultProps = {\n  isValid: true,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport './NewMovie.scss';\nimport { NewMovieControl } from '../NewMovieControl/NewMovieControl';\n\nexport class NewMovie extends Component {\n  state = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    isTitleValid: true,\n    isImgUrlValid: true,\n    isImdbUrlValid: true,\n    isImdbIdValid: true,\n  };\n\n  handleChange = (event, isValid) => {\n    event.preventDefault();\n\n    const { name, value } = event.target;\n\n    if (name === 'description') {\n      this.setState({\n        [name]: value,\n      });\n\n      return;\n    }\n\n    this.setState({\n      [name]: value,\n      [isValid]: true,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    } = this.state;\n    const newMovie = {\n      title,\n      description: description || 'No description',\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    this.props.addMovie(newMovie);\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  }\n\n  inputValidation = (name, isValid) => {\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    if (name === 'description') {\n      return;\n    }\n\n    if (this.state[name].length === 0) {\n      this.setState({ [isValid]: false });\n\n      return;\n    }\n\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      if (!pattern.test(this.state[name])) {\n        this.setState({ [isValid]: false });\n      }\n    }\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      isTitleValid,\n      isImgUrlValid,\n      isImdbUrlValid,\n      isImdbIdValid,\n    } = this.state;\n\n    const {\n      handleChange,\n      inputValidation,\n      handleSubmit,\n    } = this;\n\n    return (\n      <>\n        <form id=\"addMovie\" onSubmit={handleSubmit}>\n          <h1 className=\"form-title\">\n            Add movie to list\n          </h1>\n          <NewMovieControl\n            value={title}\n            name=\"title\"\n            title=\"Title\"\n            handleChange={handleChange}\n            inputValidation={inputValidation}\n            validationKey=\"isTitleValid\"\n            isValid={isTitleValid}\n          />\n          <NewMovieControl\n            value={description}\n            name=\"description\"\n            title=\"Description\"\n            handleChange={handleChange}\n            inputValidation={inputValidation}\n            validationKey=\"\"\n          />\n          <NewMovieControl\n            value={imgUrl}\n            name=\"imgUrl\"\n            title=\"Image link\"\n            handleChange={handleChange}\n            inputValidation={inputValidation}\n            validationKey=\"isImgUrlValid\"\n            isValid={isImgUrlValid}\n          />\n          <NewMovieControl\n            value={imdbUrl}\n            name=\"imdbUrl\"\n            title=\"IMDB link\"\n            handleChange={handleChange}\n            inputValidation={inputValidation}\n            validationKey=\"isImdbUrlValid\"\n            isValid={isImdbUrlValid}\n          />\n          <NewMovieControl\n            value={imdbId}\n            name=\"imdbId\"\n            title=\"IMDB id\"\n            handleChange={handleChange}\n            inputValidation={inputValidation}\n            validationKey=\"isImdbIdValid\"\n            isValid={isImdbIdValid}\n          />\n        </form>\n        {title\n          && imgUrl\n          && imdbUrl\n          && imdbId\n          && (\n          <button\n            className=\"btn btn-primary\"\n            type=\"submit\"\n            form=\"addMovie\"\n          >\n            Add movie\n          </button>\n          )\n        }\n      </>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (newMovie) => {\n    this.setState(state => ({\n      movies: [...state.movies, newMovie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}